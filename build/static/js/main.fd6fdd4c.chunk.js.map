{"version":3,"sources":["components/Header/index.js","components/Board/index.js","image.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Fragment","className","message","score","total","Board","id","images","map","image","style","backgroundImage","url","backgroundSize","key","index","onClick","clickHandler","App","state","clicked","handleImageClickById","imageId","_this","slice","findIndex","item","push","setState","sort","Math","random","console","log","components_Header","this","length","components_Board","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAaiBA,MAXjB,SAAgBC,GACZ,OAAOC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,gBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWL,EAAMM,SAChCL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,SAA8BL,EAAMO,MAApC,OAA+CP,EAAMQ,QAErDP,EAAAC,EAAAC,cAAA,aCIGM,MAXf,SAAeT,GACX,OAAOC,EAAAC,EAAAC,cAAA,OAAKO,GAAG,SACdV,EAAMW,OAAOC,IAAI,SAAAC,GAAK,OACrBZ,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAACC,gBAAiB,OAASF,EAAMG,IAAM,IAAKC,eAAgB,SAAUZ,UAAU,QAAQK,GAAI,SAAWG,EAAOK,IAAKL,EAAMM,MAAOC,QAC1I,WAAOpB,EAAMqB,aAAaR,EAAMM,cCJzBR,EAFA,CAAC,CAACK,IAAK,kCAAmCG,MAAO,GAAI,CAACH,IAAK,8EAA+EG,MAAO,GAAI,CAACH,IAAK,yDAA0DG,MAAO,GAAI,CAACH,IAAK,8EAA+EG,MAAO,GAAI,CAACH,IAAK,uHAAwHG,MAAO,GAAI,CAACH,IAAK,2HAA4HG,MAAO,GAAI,CAACH,IAAK,mLAAoLG,MAAO,GAAI,CAACH,IAAK,2FAA4FG,MAAO,GAAI,CAACH,IAAK,wHAAyHG,MAAO,GAAI,CAACH,IAAK,+EAAgFG,MAAO,IAAK,CAACH,IAAK,qHAAsHG,MAAO,IAAK,CAACH,IAAK,+EAAgFG,MAAO,IAAK,CAACH,IAAK,0HAA2HG,MAAO,IAAK,CAACH,IAAK,4GAA6GG,MAAO,IAAK,CAACH,IAAK,+EAAgFG,MAAO,IAAK,CAACH,IAAK,gMAAiMG,MAAO,IAAK,CAACH,IAAK,2LAA4LG,MAAO,IAAK,CAACH,IAAK,qIAAsIG,MAAO,KCuEhwEG,6MAhEbC,MAAQ,CACNjB,QAAW,0BACXC,MAAS,EAETI,OAAUA,EACVa,QAAW,MASbC,qBAAuB,SAACC,GACtB,IAAIF,EAAUG,EAAKJ,MAAMC,QAAQI,MAAM,IAGc,IAAjDJ,EAAQK,UAAU,SAAAC,GAAI,OAAIJ,IAAYI,KACxCN,EAAQO,KAAKL,GACbC,EAAKK,SAAS,CACZR,QAAWA,EACXjB,MAASoB,EAAKJ,MAAMhB,MAAQ,EAC5BD,QAAW,6BAIbqB,EAAKK,SAAS,CACZ1B,QAAW,0BACXC,MAAS,EACTiB,QAAW,KAIf,IAAIb,EAASgB,EAAKJ,MAAMZ,OAAOiB,MAAM,GACrCjB,EAAOsB,KAAK,kBAAMC,KAAKC,SAAW,KAClCR,EAAKK,SAAS,CAACrB,WACfyB,QAAQC,IAAI,sBAAuBX,4EAKnC,OACEzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACmC,EAAD,CACAhC,QAASiC,KAAKhB,MAAMjB,QACpBC,MAAOgC,KAAKhB,MAAMhB,MAClBC,MAAO+B,KAAKhB,MAAMZ,OAAO6B,SAEzBvC,EAAAC,EAAAC,cAACsC,EAAD,CACE9B,OAAQ4B,KAAKhB,MAAMZ,OACnBU,aAAckB,KAAKd,+BApDXiB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fd6fdd4c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n    return <>\n            <header>\n            <div className=\"title\">MemoryCLICKS</div>\n            <div className=\"message\">{props.message}</div>\n            <div className=\"score\">Score {props.score} of {props.total}</div>\n            </header>\n            <br/>\n        </>\n  }\n  \n  export default Header;","import React from \"react\";\n\nfunction Board(props) {\n    return <div id=\"board\">\n    {props.images.map(image => (\n      <div style={{backgroundImage: \"url(\" + image.url + \")\", backgroundSize: \"cover\"}} className=\"image\" id={\"image-\" + image} key={image.index} onClick={ \n        () => {props.clickHandler(image.index)}} ></div>\n        // <div style={{backgroundColor: image.color}} className=\"image\" id={\"image-\" + image} key={image.index} onClick={ \n        //   () => {props.clickHandler(image.index)}} ></div>\n    ))}\n  </div>\n}\n\nexport default Board;","const images = [{url: \"https://i.imgur.com/P4w7m8V.jpg\", index: 1}, {url: \"https://pm1.narvii.com/6670/e191aad9b2b33895fff2fa277f826e7cd83221d9_hq.jpg\", index: 2}, {url: \"http://www.nintendoworldreport.com/media/18935/4/1.jpg\", index: 3}, {url: \"https://www.smashbros.com/wiiu-3ds/sp/images/character/donkey_kong/main.png\", index: 4}, {url: \"https://aff5fa4925746bf9c161-fb36f18ca122a30f6899af8eef8fa39b.ssl.cf5.rackcdn.com/images/Masthead_Zelda.5fb367ea.png\", index: 5}, {url: \"https://img.rankedboost.com/wp-content/plugins/super-smash-bros-ultimate/assets/character-images-main/Charizard_SSBU.png\", index: 6}, {url: \"https://vignette.wikia.nocookie.net/ssb/images/8/81/Zero_Suit_Samus_-_Super_Smash_Bros._for_Nintendo_3DS_and_Wii_U.png/revision/latest/scale-to-width-down/350?cb=20181031171153\", index: 7}, {url: \"https://static.giantbomb.com/uploads/square_small/15/153607/2555000-2339414779-Mario.png\", index: 8}, {url: \"https://aff5fa4925746bf9c161-fb36f18ca122a30f6899af8eef8fa39b.ssl.cf5.rackcdn.com/images/Masthead_Tingle.5fb367ea.png\", index: 9}, {url: \"https://i.pinimg.com/originals/83/81/e4/8381e443b415934154ec979a2f3d8d85.png\", index: 10}, {url: \"https://vignette.wikia.nocookie.net/iceclimbers/images/7/7b/Iceclimbersbrawl.jpg/revision/latest?cb=20101223092701\", index: 11}, {url: \"https://i.pinimg.com/originals/90/1e/70/901e709b5a8bf504ad6fc38bcbbf23a8.jpg\", index: 12}, {url: \"https://vignette.wikia.nocookie.net/neoencyclopedia/images/5/5c/DarkLordGanondorf.png/revision/latest?cb=20130717125944\", index: 13}, {url: \"https://vignette.wikia.nocookie.net/fantendo/images/7/79/Ness_SSB3M.png/revision/latest?cb=20140702150519\", index: 14}, {url: \"https://i.pinimg.com/originals/59/4a/e1/594ae16c85fb39863fe047c394cdcff6.jpg\", index: 15}, {url: \"https://vignette.wikia.nocookie.net/nintendo/images/a/ad/Super_Smash_Bros._Ultimate_-_Character_Art_-_Young_Link.png/revision/latest/scale-to-width-down/310?cb=20180612180210&path-prefix=en\", index: 16}, {url: \"https://vignette.wikia.nocookie.net/nintendo/images/f/fd/Super_Smash_Bros._Ultimate_-_Character_Art_-_Sonic.png/revision/latest/scale-to-width-down/310?cb=20180612181133&path-prefix=en\", index: 17}, {url: \"https://vignette.wikia.nocookie.net/totalwarfare/images/e/ec/Bowser_-_New_Super_Mario_Bros_2.png/revision/latest?cb=20151026222325\", index: 18}];\n\nexport default images;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header/index\";\nimport Board from  \"./components/Board/index\";\nimport images from \"./image\";\n\nclass App extends Component {\n  state = {\n    \"message\": \"Click an image to start\",\n    \"score\": 0,\n    // \"images\": [1,2,3,4,5,6,7,8,9,10],\n    \"images\": images,\n    \"clicked\": []\n  };\n\n  // handleImageClick = (event) => {\n  //   console.log(\"CLICKED\", event.target);\n  //   let imageId = event.target.getAttribute(\"id\");\n  //   console.log(\"Image ID\", imageId);\n  // }\n\n  handleImageClickById = (imageId) => {\n    let clicked = this.state.clicked.slice(0); // new array; copy of \"clicked\" array from state\n\n    // is this imageId in clicked\n    if (clicked.findIndex(item => imageId === item) === -1){\n      clicked.push(imageId);\n      this.setState({\n        \"clicked\": clicked,\n        \"score\": this.state.score + 1,\n        \"message\": \"Good guess, keep going!\"\n      })\n    } else {\n      // you lose, start over\n      this.setState({\n        \"message\": \"You Lose, start over :(\",\n        \"score\": 0,\n        \"clicked\": []\n      })\n    }\n    // rearrange images\n    let images = this.state.images.slice(0);\n    images.sort(() => Math.random() - 0.5);\n    this.setState({images});\n    console.log(\"handling click for \", imageId);\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header \n        message={this.state.message}\n        score={this.state.score}\n        total={this.state.images.length} />\n\n        <Board\n          images={this.state.images}\n          clickHandler={this.handleImageClickById}\n        />\n        {/* <div id=\"board\">\n          {this.state.images.map(image => (\n            <div style={{backgroundColor: image.color}} className=\"image\" id={\"image-\" + image} key={image.index} onClick={ \n              () => {this.handleImageClickById(image.index)}} ></div>\n          ))}\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}